generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  telegramId    String    @unique
  username      String?
  balanceStars  Float     @default(0)
  balanceCoins  Float     @default(0)
  pickaxeLevel  Int       @default(0)
  referrerId    Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  referrals     User[]    @relation("Referrals")
  referrer      User?     @relation("Referrals", fields: [referrerId], references: [id])
  MineLogs      MineLog[]
  Transactions  Transaction[]
  Withdrawals   Withdrawal[]
}

model PickaxeLevel {
  id             Int      @id @default(autoincrement())
  level          Int      @unique
  cost           Int
  coalMin        Int
  coalMax        Int
  copperMin      Int
  copperMax      Int
  ironMin        Int
  ironMax        Int
  goldMin        Int
  goldMax        Int
  diamondMin     Int
  diamondMax     Int
  chanceMultiplier Json
  createdAt      DateTime @default(now())
}

model Case {
  id         Int      @id @default(autoincrement())
  externalId String   @unique
  name       String
  costStars  Int
  meta       Json?
  createdAt  DateTime @default(now())
}

model MineLog {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  resource  String
  amount    Int
  coinValue Int
  createdAt DateTime @default(now())
}

model Transaction {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  type        String
  deltaStars  Float
  balanceAfter Float
  meta        Json?
  createdAt   DateTime @default(now())
}

model Withdrawal {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  amountStars   Int
  feeStars      Int
  status        String   @default("pending")
  createdAt     DateTime @default(now())
  processedAt   DateTime?
}
